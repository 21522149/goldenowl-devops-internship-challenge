name: CI/CD Pipeline

on:
  push:
    branches:
      - master        
      - "feature"
  pull_request:
      branches:
        - master        

env:
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  # CI (TEST)
  test:
    name: Run CI Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test 

  # CI (BUILD) TRÊN MASTER BRANCH
  build-and-push:
    name: Build, Scan, and Push to ECR
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }} 
    env:
      IMAGE_TAG: ${{ github.sha }}
      IMAGE_NAME: ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # BUILD
      - name: Build and tag image
        run: |
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:latest

      # QUÉT TRIVY
      - name: Run Trivy vulnerability scanner (Main Branch)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      # PUSH
      - name: Push image to Amazon ECR
        id: push-image
        run: |
          # Chỉ push khi bước quét Trivy ở trên thành công
          docker push $IMAGE_NAME:$IMAGE_TAG
          docker push $IMAGE_NAME:latest

  # CD (DEPLOY) LÊN EC2 TỪ MASTER BRANCH
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    if: github.ref == 'refs/heads/master'
    
    needs: build-and-push 

    steps:
      - name: Deploy to EC2 instance via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            export IMAGE_NAME=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}
            
            # Login vào ECR (sử dụng IAM Role của EC2)
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # Dừng và xóa container cũ (nếu có)
            docker stop my-node-app || true
            docker rm my-node-app || true
            
            # Kéo image mới về
            docker pull $IMAGE_NAME
            
            # Map port 80 của máy chủ EC2 vào port 3000 của container
            docker run -d -p 80:3000 --name go-challenge $IMAGE_NAME